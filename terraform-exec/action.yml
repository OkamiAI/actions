name: Execute Terraform
description: Execute a Terraform command
inputs:
  module: 
    description: Working directory
    required: true
  workspace:
    description: Terraform workspace
    required: false
    default: default
  command:
    description: Terraform command
    required: true
    default: plan
  parallelism:
    description: Terraform parallelism
    required: false
runs:
  using: composite
  steps:

  - name: Verify Command
    id: verify-command
    shell: bash
    if: >-
      !contains(fromJSON('["apply", "destroy", "plan"]'), inputs.command)
    run: |
      echo "Invalid command: ${{ inputs.command }}"
      echo "Valid commands: apply, destroy, plan"
      exit 1

  - name: Setup
    id: setup
    shell: bash
    working-directory: ${{ inputs.module }}
    env:
      TF_WORKSPACE: ${{ inputs.workspace }}
      TF_COMMAND: ${{ inputs.command }}
      TF_PARALLELISM: ${{ inputs.parallelism }}
      MODULE: ${{ inputs.module }}
    run: |
      ARGS=(
        -auto-approve
        -input=false
      )
      MODULE_NAME=$(basename $MODULE)
      echo "module_name=$MODULE_NAME" >> $GITHUB_OUTPUT

      # if parallelism is set then add it to the args
      if [ -n "$TF_PARALLELISM" ]; then
        ARGS+=("-parallelism=$TF_PARALLELISM")
      fi

      PLAN_FILE="${MODULE_NAME}-${TF_WORKSPACE}.tfplan"
      echo "PLAN_FILE=$PLAN_FILE" >> $GITHUB_ENV

      echo "args=${ARGS[*]}" >> $GITHUB_ENV

  - name: Select Workspace
    id: select-workspace
    shell: bash
    working-directory: ${{ inputs.module }}
    continue-on-error: true
    run: terraform workspace select -or-create ${{ inputs.workspace }}

  - name: Check if Plan Exists
    id: archived-plan
    continue-on-error: true
    uses: actions/download-artifact@v3
    with:
      name: ${{ env.PLAN_FILE }}
      path: ${{ inputs.module }}/${{ env.PLAN_FILE }}

  - name: Plan Module
    id: plan
    shell: bash
    working-directory: ${{ inputs.module }}
    if: steps.archived-plan.outcome == 'failure'
    env:
      TF_ARGS: ${{ steps.setup.outputs.args }}
    run: terraform plan $TF_ARGS -out=$PLAN_FILE

  - name: foo
    shell: bash
    working-directory: ${{ inputs.module }}
    run: |
      ls -al ./
      tree

  - name: Show Plan
    id: show
    shell: bash
    working-directory: ${{ inputs.module }}
    if: steps.archived-plan.outcome == 'success'
    run: terraform show $PLAN_FILE

  - name: Archive Plan
    id: archive-plan
    if: steps.archived-plan.outcome == 'failure'
    uses: actions/upload-artifact@v3
    with:
      name: ${{ env.PLAN_FILE }}
      path: ${{ inputs.module }}/${{ env.PLAN_FILE }}

  - name: Exec Module
    id: exec
    shell: bash
    working-directory: ${{ inputs.module }}
    if: inputs.command != 'plan'
    env:
      TF_ARGS: ${{ steps.setup.outputs.args }}
      TF_COMMAND: ${{ inputs.command }}
    run: terraform $TF_COMMAND $TF_ARGS $PLAN_FILE

name: Validate Module
description: Test a single Terraform module
inputs:
  module: 
    description: Working directory
    required: true
  lint:
    description: Lint the module
    required: false
    default: "true"
  validate:
    description: Validate the module
    required: false
    default: "true"
  fmt:
    description: Format the module
    required: false
    default: "true"
  test:
    description: Test the module
    required: false
    default: "true"
  test_dir:
    description: Test directory, defaults to 'tests'
    required: false
  review:
    description: Do review checks on module. If false only init runs.
    required: false
    default: "true"
  prefix:
    description: tfstate s3 bucket prefix
    required:  false
    default: "duplo-tfstate"

runs:
  using: composite
  steps:

  - name: Setup
    id: setup
    shell: bash
    working-directory: ${{ inputs.module }}
    env:
      WKDIR: ${{ inputs.module }}
      TEST_DIR: ${{ inputs.test_dir }}
      MODULE_CACHE: "false"
      PREFIX: ${{ inputs.prefix }}
    run: |
      MODULE=$(basename $WKDIR)
      DUPLO_TF_BUCKET=${PREFIX}-${DUPLO_ACCOUNT_ID}
      ARGS=(
        -input=false
      )

      if [ "$AWS_ENABLED" == "true" ]; then
        echo "AWS enabled, setting up backend config for S3 and DynamoDB"
        ARGS+=(
          -backend-config=dynamodb_table=${DUPLO_TF_BUCKET}-lock
          -backend-config=region=$DUPLO_DEFAULT_REGION
          -backend-config=bucket=$DUPLO_TF_BUCKET
        )
      elif [ "$AZURE_ENABLED" == "true" ]; then
        echo "Azure enabled, setting up backend config for Blob Storage"
        # if the RESOURCE_GROUP variable is not set, fail with error
        if [ -z "$RESOURCE_GROUP" ]; then
          echo "RESOURCE_GROUP is not set, please set the variable"
          exit 1
        fi
        DUPLO_TF_BUCKET=duplotfstate${DUPLO_ACCOUNT_ID}
        ARGS+=(
          -backend-config=storage_account_name=$DUPLO_TF_BUCKET
        )
        ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $DUPLO_TF_BUCKET --query '[0].value' -o tsv)
        echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
      elif [ "$GCP_ENABLED" == "true" ]; then
        echo "GCP enabled, setting up backend config for GCS"
        ARGS+=(
          -backend-config=bucket=$DUPLO_TF_BUCKET
        )
      fi

      # if the test dir has a value then add the param
      if [ -n "$TEST_DIR" ]; then
        ARGS+=("-test-directory=$TEST_DIR")
      fi

      # check if the terraform lock file is present
      LOCK_FILE=".terraform.lock.hcl"
      if [ -f "${LOCK_FILE}" ]; then
        MODULE_CACHE="true"
        echo "Terraform lock file detected, caching enabled"
      fi

      # these are for the next steps
      echo "module_cache=$MODULE_CACHE" >> $GITHUB_OUTPUT
      echo "lockfile=$WKDIR/$LOCK_FILE" >> $GITHUB_OUTPUT
      echo "module=$MODULE" >> $GITHUB_OUTPUT
      echo "args=${ARGS[*]}" >> $GITHUB_OUTPUT

      # some more useful env vars
      echo "DUPLO_TF_BUCKET=$DUPLO_TF_BUCKET" >> $GITHUB_ENV

  - name: Cache Modules
    id: plugin-cache
    uses: actions/cache@v4
    if: steps.setup.outputs.module_cache == 'true'
    with:
      path: |
        ${{ github.workspace }}/${{ inputs.module }}/.terraform
      key: ${{ inputs.module }}-${{ hashFiles(steps.setup.outputs.lockfile) }}

  - name: TF Init Module
    id: init
    shell: bash
    working-directory: ${{ inputs.module }}
    run: terraform init ${{ steps.setup.outputs.args }}

  - name: Init TFLint
    id: lint-init
    shell: bash
    if: >
      inputs.lint == 'true' &&
      env.LINT_ENABLED == 'true'
    working-directory: ${{ inputs.module }}
    run: tflint --init -c $TFLINT_FILE

  - name: Run TFLint
    id: lint
    if: >
      inputs.lint == 'true' &&
      env.LINT_ENABLED == 'true'
    shell: bash
    working-directory: ${{ inputs.module }}
    run: tflint -c $TFLINT_FILE

  - name: TF Validate Module
    id: validate
    if: inputs.validate == 'true'
    shell: bash
    working-directory: ${{ inputs.module }}
    run: terraform validate

  - name: Validate Format
    id: fmt
    if: inputs.fmt == 'true'
    shell: bash
    working-directory: ${{ inputs.module }}
    run: terraform fmt -check=true -diff=true -recursive

  - name: Test Module
    id: test
    if: inputs.test == 'true'
    working-directory: ${{ inputs.module }}
    shell: bash
    run: terraform test

  - name: Report
    id: report
    shell: bash
    working-directory: ${{ inputs.module }}
    if: always()
    env:
      MODULE_NAME: ${{ steps.setup.outputs.module }}
      MODULE_DIR: ${{ inputs.module }}
      FMT_OUTCOME: ${{ steps.fmt.outcome }}
      VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
      LINT_OUTCOME: ${{ steps.lint.outcome }}
      TEST_OUTCOME: ${{ steps.test.outcome }}
      INIT_OUTCOME: ${{ steps.init.outcome }}
    run: |
      function outcome() {
        if [[ "$1" == "success" ]]; then
          echo "✅"
        elif [[ "$1" == "failure" ]]; then
          echo "❌"
        else # skipped
          echo ""
        fi
      }
      cat <<EOF >> $GITHUB_STEP_SUMMARY
      ## $MODULE_DIR
      | Init | Format | Validate | Lint | Test |
      | ---- | ------ | -------- | ---- | ---- |
      | $(outcome $INIT_OUTCOME) | $(outcome $FMT_OUTCOME) | $(outcome $VALIDATE_OUTCOME) | $(outcome $LINT_OUTCOME) | $(outcome $TEST_OUTCOME) |
      EOF
